#!/usr/bin/env python

import rospy
from actionlib import SimpleActionClient, SimpleActionServer, SimpleGoalState, GoalStatus
from hmi_msgs.msg import QueryAction
from hmi.common import trim_string
from rosgraph.names import namespace


def goal_to_str(goal):
    logstr = ', '.join(['(%s)' % str(c).replace('\n', ', ') for c in goal.target])
    return 'description: "%s", grammar: "%s", target: [%s]' % (goal.description, trim_string(goal.grammar), logstr)


def result_to_str(result):
    logstr = 'Result: "{}", Semantics: "{}"'.format(result.sentence, result.semantics)
    return '[%s]' % logstr


class MultiClient(object):
    def __init__(self, name, server_namespace):
        self._action_name = name
        self._server_namespace = server_namespace

        self.server = SimpleActionServer(name, QueryAction,
                                         execute_cb=self.execute_cb, auto_start=False)
        self.server.start()
        rospy.loginfo('%s started with ns: %s', name, server_namespace)

    def _feedback_callback(self, feedback):
        self.server.publish_feedback(feedback)

    def execute_cb(self, goal):
        rospy.loginfo('got a goal: %s', goal_to_str(goal))

        client_nss = set()
        clients = []

        # wait 0.1 second for every new client
        timeout = rospy.Duration(0.1)

        # wait for one server to be finished
        r = rospy.Rate(10)
        while not rospy.is_shutdown():
            # the goal could be cancelled
            if self.server.is_preempt_requested():
                rospy.loginfo('preempt requested (%s)' % self._action_name)
                break

            # check if a new client registered
            new_client_nss = set(self.find_servers(self._server_namespace)) - client_nss
            if new_client_nss:
                rospy.loginfo('%d new client(s) found: %s', len(new_client_nss), new_client_nss)
                for client_ns in new_client_nss:
                    client = HMIClient(client_ns)
                    client.wait_for_server(timeout)
                    client.send_goal(goal, feedback_cb=self._feedback_callback)
                    clients.append(client)
                client_nss |= new_client_nss

            # check if we are done
            if self.one_client_done(clients):
                break

            rospy.logdebug('spinning...')
            r.sleep()

        # get the result
        result = None
        for client in clients:
            if client.get_state() == GoalStatus.SUCCEEDED:
                result = client.get_result()
                rospy.loginfo('taking the result from: %s', client)
                break

        # cancel all the others
        for client in clients:
            if client.simple_state != SimpleGoalState.DONE:
                rospy.loginfo('cancel: %s', client)
                client.cancel_goal()

        if result:
            rospy.loginfo('result: %s', result_to_str(result))
        else:
            rospy.logwarn('no result received')

        if self.server.is_preempt_requested():
            self.server.set_preempted()
            return

        if result:
            self.server.set_succeeded(result)
        else:
            self.server.set_aborted(result=None, text="No result")

    @staticmethod
    def one_client_done(clients):
        active_clients = 0

        loop_period = rospy.Duration(0.1)
        for client in clients:
            if client.wait_for_result(loop_period):
                # client is done, so we might have a result
                if client.get_state() == GoalStatus.SUCCEEDED:
                    # client has a good result, so we can quit now
                    rospy.loginfo('client has a result: %r', client)
                    return True
                else:
                    # no result, so the client is not active anymore
                    pass
            else:
                # client is still pending/active
                active_clients += 1

        if active_clients:
            return False
        else:
            rospy.logerr('there are no active hmi clients at this moment, %d of them did not succeed', len(clients))
            return True

    def find_servers(self, ns):
        topics = []
        for name, topic_type in rospy.get_published_topics(ns):
            topic_ns = namespace(name)[0:-1]
            if topic_ns != self._server_namespace:
                if topic_type == 'hmi_msgs/QueryActionResult':
                    # rospy.loginfo('Found topic %s', name)
                    topics.append(topic_ns)

        return topics


class HMIClient(SimpleActionClient):
    def __init__(self, ns):
        SimpleActionClient.__init__(self, ns, QueryAction)

    def send_goal(self, goal, *args, **kwargs):
        rospy.loginfo('sending %s the following goal: %s',
                      self.action_client.ns, goal_to_str(goal))
        SimpleActionClient.send_goal(self, goal=goal, *args, **kwargs)

    def __str__(self):
        return 'HMIClient(ns=%r)' % self.action_client.ns

    def __repr__(self):
        return 'HMIClient(ns=%r, state=%r, goal=%r)' \
               % (self.action_client.ns,
                  SimpleGoalState.to_string(self.simple_state),
                  GoalStatus.to_string(self.get_state()))


if __name__ == '__main__':
    rospy.init_node('multi_client')

    ns = rospy.get_namespace() + 'hmi'

    MultiClient(rospy.get_name(), ns)
    rospy.spin()
