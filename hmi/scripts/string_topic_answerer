#!/usr/bin/env python

from typing import Callable

import rospy
from hmi import AbstractHMIServer, HMIResult
from hmi.common import parse_sentence
from std_msgs.msg import String


class StringTopicServer(AbstractHMIServer):
    def __init__(self, *args, **kwargs):
        super(self.__class__, self).__init__(*args, **kwargs)

        self._string: str = None
        self._string_sub = rospy.Subscriber("string", String, self._string_callback, queue_size=1)
        rospy.loginfo("StringTopicServer: subscribed to %s", self._string_sub.name)

    def _string_callback(self, msg: String):
        self._string = msg.data

    def _determine_answer(
            self, description: str, grammar: str, target: str, is_preempt_requested: Callable
    ) -> HMIResult:
        self._string = None
        while not rospy.is_shutdown() and not is_preempt_requested() and not self._string:
            rospy.sleep(.1)

        if rospy.is_shutdown() or is_preempt_requested():
            return None

        rospy.loginfo("Received string: '%s'", self._string)

        semantics = parse_sentence(self._string, grammar, target)

        rospy.loginfo("Parsed semantics: %s", semantics)

        result = HMIResult(self._string, semantics)
        self._string = None

        return result


if __name__ == '__main__':
    rospy.init_node('string_topic_server')
    StringTopicServer(rospy.get_name())
    rospy.spin()
