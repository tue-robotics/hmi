#!/usr/bin/env python

from typing import Callable

import rospy
from hmi import AbstractHMIServer, HMIResult
from hmi.common import parse_sentence
import cv2
from cv_bridge import CvBridge
from sensor_msgs.msg import CompressedImage
from pyzbar.pyzbar import decode as qr_decode


def validate_image(gray_img, qr_code_rect, threshold_percentage=65) -> bool:
    x, y, w, h = qr_code_rect  # Coordinates of the bounding box around the QR code

    # Calculate the area of the QR code
    qr_code_area = w * h

    # Calculate the total area of the image
    total_image_area = gray_img.shape[0] * gray_img.shape[1]

    # Calculate the percentage of the screen occupied by the QR code
    qr_code_percentage = (qr_code_area / total_image_area) * 100

    rospy.loginfo(f"QR code occupies {qr_code_percentage:.2f}% of the screen.")

    # Check if the QR code occupies at least threshold_percentage of the screen
    if qr_code_percentage >= threshold_percentage:
        return True
    else:
        rospy.logwarn("QR code does not occupy the required percentage of the screen.")
        return False


class QRCodeDecode(AbstractHMIServer):
    def __init__(self, *args, **kwargs) -> None:
        super(self.__class__, self).__init__(*args, **kwargs)

        # Image
        self._image_topic = "/hero/head_rgbd_sensor/rgb/image_raw/compressed"
        self._image = None
        self._image_format = None

        # QR code data decoded from image
        self._qr_code_data = None

        self.tries = 5

        self._cv_bridge = CvBridge()

        self._image_sub = rospy.Subscriber(self._image_topic, CompressedImage, self._image_callback, queue_size=1)
        rospy.loginfo("QRCodeDecode: subscribed to %s", self._image_sub.name)

    def _image_callback(self, msg: CompressedImage) -> None:
        self._image = self._cv_bridge.compressed_imgmsg_to_cv2(msg)
        # self._image_format = msg.format

    def _determine_answer(
        self, description: str, grammar: str, target: str, is_preempt_requested: Callable
    ) -> HMIResult:
        result = ""
        rospy.loginfo("Received image!")

        self.decode_qr_code()

        rospy.loginfo("QR code data: %s", self._qr_code_data)

        if self._qr_code_data:
            semantics = parse_sentence(self._qr_code_data, grammar, target)

            rospy.loginfo("Parsed semantics: %s", semantics)

            result = HMIResult(self._qr_code_data, semantics)

        return result

    def decode_qr_code(self) -> None:
        data_decoded = []
        valid_qr = False

        for _ in range(self.tries):
            # gray_img = cv2.imdecode(self._image, cv2.IMREAD_GRAYSCALE)
            gray_img = self._image
            qr_list = qr_decode(gray_img)
            qr = None

            for qr_i in qr_list:
                # valid_qr = validate_image(gray_img, qr_i.rect)
                # if valid_qr:
                #     qr = qr_i
                #     break
                qr = qr_i

            # if not valid_qr:
            #     # qr code does not occupy the required percentage of the screen
            #     break
            data_decoded.append(qr.data.decode("utf-8"))

        # if len(set(data_decoded)) == 1 and valid_qr:
        if len(set(data_decoded)) == 1:
            rospy.loginfo("QR code decoding successful.")
            self._qr_code_data = data_decoded[0]
        else:
            rospy.logwarn("QR code decoding failed.")


if __name__ == "__main__":
    rospy.init_node("qr_code_decode")
    QRCodeDecode(rospy.get_name())
    rospy.spin()
