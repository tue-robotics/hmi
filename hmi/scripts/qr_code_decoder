#!/usr/bin/env python

from typing import Callable

import rospy
from hmi import AbstractHMIServer, HMIResult
from hmi.common import parse_sentence
import cv2
from sensor_msgs.msg import CompressedImage
from pyzbar.pyzbar import decode as qr_decode


class QRCodeDecode(AbstractHMIServer):
    def __init__(self, *args, **kwargs) -> None:
        super(self.__class__, self).__init__(*args, **kwargs)

        # Image
        self._image_topic = "image"
        self._image = None
        self._image_format = None

        # QR code data decoded from image
        self._qr_code_data = None

        # ToDo: Read qr code 5 times to verify the data
        # ToDo: Check how much of the screen the qr code takes up (to not have false positives)

        self._image_sub = rospy.Subscriber(self._image_topic, CompressedImage, self._image_callback, queue_size=1)
        rospy.loginfo("QRCodeDecode: subscribed to %s", self._image_sub.name)

    def _image_callback(self, msg: CompressedImage) -> None:
        self._image = msg.data
        self._image_format = msg.format

    def _determine_answer(
        self, description: str, grammar: str, target: str, is_preempt_requested: Callable
    ) -> HMIResult:

        rospy.loginfo("Received image!")

        self.decode_qr_code()

        semantics = parse_sentence(self._image, grammar, target)

        rospy.loginfo("Parsed semantics: %s", semantics)

        result = HMIResult(self._image, semantics)
        self._string = None

        return result

    def decode_qr_code(self) -> None:
        # Decode QR code from image
        gray_img = cv2.cvtColor(self._image, 0)
        qr = qr_decode(gray_img)[0]

        self._qr_code_data = qr.data.decode("utf-8")


if __name__ == "__main__":
    rospy.init_node("qr_code_decode")
    QRCodeDecode(rospy.get_name())
    rospy.spin()
