#!/usr/bin/env python

from typing import Callable

from numpy import ndarray

import rospy
from hmi import AbstractHMIServer, HMIResult
from hmi.common import parse_sentence
from cv_bridge import CvBridge
from sensor_msgs.msg import CompressedImage
from pyzbar.pyzbar import decode as qr_decode


def validate_image(qr_image: ndarray, qr_code_rect: tuple, threshold_percentage: int = 20) -> bool:
    """
    Check if the QR code occupies at least threshold_percentage of the screen.

    :param qr_image: The image containing the QR code.
    :param qr_code_rect: Tuple containing the coordinates of the bounding box around the QR code.
    :param threshold_percentage: The minimum percentage of the screen that the QR code should occupy.
    """

    x, y, w, h = qr_code_rect  # Coordinates of the bounding box around the QR code

    # Calculate the area of the QR code
    qr_code_area = w * h

    # Calculate the total area of the image
    total_image_area = qr_image.shape[0] * qr_image.shape[1]

    # Calculate the percentage of the screen occupied by the QR code
    qr_code_percentage = (qr_code_area / total_image_area) * 100

    # Check if the QR code occupies at least threshold_percentage of the screen
    if qr_code_percentage >= threshold_percentage:
        rospy.loginfo(f"QR code occupies {qr_code_percentage:.2f}% of the screen.")
        return True

    return False


class QRCodeDecode(AbstractHMIServer):
    """
    QRCodeDecode class for decoding QR codes.
    """

    def __init__(self, *args, **kwargs) -> None:
        super(self.__class__, self).__init__(*args, **kwargs)

        # Image
        self._image_topic = "head_rgbd_sensor/rgb/image_raw/compressed"
        self._image = None
        self._image_sub = None

        self._cv_bridge = CvBridge()

        self._tries = 5
        self._results = []
        self._qr_code_data = None

    def _image_callback(self, msg: CompressedImage) -> None:
        # Will be called every time a new image is received
        self._image = self._cv_bridge.compressed_imgmsg_to_cv2(msg)
        result = self.decode_qr_code()

        # If we see a QR code
        if result:
            self._results.append(result)
            self._tries -= 1

    def _determine_answer(
        self,
        description: str,
        grammar: str,
        target: str,
        is_preempt_requested: Callable,
    ) -> HMIResult:

        self._image_sub = rospy.Subscriber(self._image_topic, CompressedImage, self._image_callback, queue_size=1)
        rospy.loginfo("QRCodeDecode: subscribed to %s", self._image_sub.name)

        # Initialize
        result = HMIResult("", {})

        # Waits for _image_callback to do the tries
        while self._tries > 0:
            rospy.loginfo("Waiting for QR code data...")
            rospy.sleep(1)
            if is_preempt_requested():
                return result

        # check if all results are the same
        if len(set(self._results)) == 1:
            self._qr_code_data = self._results[0]

        if self._qr_code_data:
            self._image_sub.unregister()
            rospy.loginfo("QR code data: %s", self._qr_code_data)
            semantics = parse_sentence(self._qr_code_data, grammar, target)
            rospy.loginfo("Parsed semantics: %s", semantics)
            result = HMIResult(self._qr_code_data, semantics)

        self.reset_server()
        return result

    def decode_qr_code(self) -> str:
        """
        Decode the QR code from the image.
        """

        qr_list = qr_decode(self._image)  # Gets all QR codes in the image
        qr = None

        # Stores all QRs that occupy the required percentage of the screen
        for qr_i in qr_list:
            if validate_image(self._image, qr_i.rect):
                qr = qr_i
                break

        if not qr:
            # qr code does not occupy the required percentage of the screen
            rospy.logwarn("QR code does not occupy the required percentage of the screen.")
            return ""

        return qr.data.decode("utf-8")

    def reset_server(self) -> None:
        """
        Re-initialize the server.
        """
        self._tries = 5
        self._results = []
        self._qr_code_data = None


if __name__ == "__main__":
    rospy.init_node("qr_code_decode")
    QRCodeDecode(rospy.get_name())
    rospy.spin()
