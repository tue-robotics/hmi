#!/usr/bin/env python

from typing import Callable, List, Optional

from numpy import ndarray

import rospy
from hmi import AbstractHMIServer, HMIResult
from hmi.common import parse_sentence
from cv_bridge import CvBridge
from sensor_msgs.msg import CompressedImage
from pyzbar.pyzbar import Decoded, decode as qr_decode


def calc_area_percentage(qr_image: ndarray, qr_code_rect: tuple) -> float:
    """
    Calculate the percentage of the screen occupied by the QR code.

    :param qr_image: The image containing the QR code.
    :param qr_code_rect: Tuple containing the coordinates of the bounding box around the QR code.
    """

    x, y, w, h = qr_code_rect  # Coordinates of the bounding box around the QR code

    # Calculate the area of the QR code
    qr_code_area = w * h

    # Calculate the total area of the image
    total_image_area = qr_image.shape[0] * qr_image.shape[1]

    # Calculate the percentage of the screen occupied by the QR code
    qr_code_percentage = (qr_code_area / total_image_area) * 100

    return qr_code_percentage


def decode_qr_code(image: ndarray) -> str:
    """
    Decode the QR code from the image.

    :param image: image to run qr decoding on
    """

    qr_list: List[Decoded] = qr_decode(image)  # Gets all QR codes in the image

    # Stores all QRs that occupy the required percentage of the screen
    qr_list_area_percentage = sorted([(calc_area_percentage(image, qr_i.rect), qr_i) for qr_i in qr_list], reverse=True)
    rospy.logdebug(f"QR code area percentage(s): {[area_percentage for area_percentage, _ in qr_list_area_percentage]}")
    if not qr_list_area_percentage:
        # qr code does not occupy the required percentage of the screen
        rospy.logdebug("No QR code found")
        return ""

    area_percentage, qr = qr_list_area_percentage[0]
    qr_data = qr.data.decode("utf-8")
    rospy.logdebug(f"Found QR code ({area_percentage}%): {qr_data}")

    return qr.data.decode("utf-8")


class QRCodeDecode(AbstractHMIServer):
    """
    QRCodeDecode class for decoding QR codes.
    """

    def __init__(self, name: str, image_loop_rate: float = 2.0, loop_rate: float = 1.0, *args, **kwargs) -> None:
        super().__init__(name, *args, **kwargs)

        if not image_loop_rate > 0:
            raise ValueError("image_loop_rate must be greater than 0")
        if not loop_rate > 0:
            raise ValueError("loop_rate must be greater than 0")

        # Image
        self._image_sub: Optional[rospy.Subscriber] = None

        self._cv_bridge = CvBridge()

        self._new_image_time_stamp_threshold: rospy.Time = rospy.Time.now()
        self._image_time_stamp_difference: rospy.Duration = rospy.Duration(1.0 / image_loop_rate)
        self._loop_rate: float = loop_rate

        self._results: List[str] = []
        self._qr_code_data: Optional[str] = None

    def _image_callback(self, msg: CompressedImage) -> None:
        # Will be called every time a new image is received
        if msg.header.stamp < self._new_image_time_stamp_threshold:
            return

        self._new_image_time_stamp_threshold = msg.header.stamp + self._image_time_stamp_difference
        image = self._cv_bridge.compressed_imgmsg_to_cv2(msg)
        result = decode_qr_code(image)

        # If we see a QR code
        if result:
            self._results.append(result)

    def _determine_answer(
        self, description: str, grammar: str, target: str, is_preempt_requested: Callable
    ) -> HMIResult:

        self._image_sub = rospy.Subscriber("~image", CompressedImage, self._image_callback, queue_size=1)
        rospy.logdebug(f"QRCodeDecode: subscribed to {self._image_sub.name}")

        # Initialize
        result = HMIResult("", {})

        # Waits for _image_callback to do the tries
        r = rospy.Rate(self._loop_rate)
        while not rospy.is_shutdown() and not self._results:
            rospy.logdebug("Waiting for QR code data...")
            r.sleep()
            if is_preempt_requested():
                self.reset_server()
                return result

        # check if all results are the same
        if num_results := len(set(self._results)) != 1:
            rospy.logwarn(f"Found '{num_results}' codes detected")
            self.reset_server()
            return result

        qr_code_data = self._results[0]
        self.reset_server()

        rospy.loginfo(f"QR code data: {qr_code_data}")
        sentence = qr_code_data.lower()
        semantics = parse_sentence(sentence, grammar, target)
        rospy.loginfo(f"Parsed semantics: {semantics}")
        result = HMIResult(sentence, semantics)

        return result

    def reset_server(self) -> None:
        """
        Re-initialize the server.
        """
        self._image_sub.unregister()
        self._results = []


if __name__ == "__main__":
    rospy.init_node("qr_code_decode")
    QRCodeDecode(name=rospy.get_name())
    rospy.spin()
