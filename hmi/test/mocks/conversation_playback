#!/usr/bin/env python
import random

import rospy
from hmi import AbstractHMIServer, HMIResult
from hmi.common import random_sentence, result_from_ros, parse_sentence

wait_time = 1.0

conversation = iter([
    "Amigo",
    # What can I do for you?
    "Find john navigate to the dining table and pick up the bowl",
    # "I heard ... is this correct?"
    "Yes",
    # "I don't have enough info, ..."
    "Kitchen",
    # "Is this correct?"
    "Yes",
    # "I don't have enough info ..."
    "Bookcase",
    # "Is this correct?"
    "Yes"
    ])

class HMIServer(AbstractHMIServer):
    def __init__(self, *args, **kwargs):
        super(HMIServer, self).__init__(*args, **kwargs)
        self.conversation_done = False

    def _determine_answer(self, description, grammar, target, is_preempt_requested):
        rospy.loginfo('Waiting for %d seconds', wait_time)
        start = rospy.Time.now()
        while rospy.Time.now() - start < rospy.Duration(wait_time) \
            and not is_preempt_requested() \
            and not rospy.is_shutdown():
            rospy.sleep(0.1)

        if not self.conversation_done:
            try:
                sentence = conversation.next()
                rospy.loginfo("Next step in conversation: %s", sentence)

                semantics = parse_sentence(sentence, grammar, target)
                rospy.loginfo("Parsed semantics: %s", semantics)

                return HMIResult(sentence, semantics)
            except StopIteration:
                self.conversation_done = True
        else:
            rospy.logwarn("Conversation ended")


if __name__ == '__main__':
    rospy.init_node('conversation_playback')
    HMIServer(rospy.get_name())
    rospy.spin()
